import copy
board = [["-", "-", "-"],
         ["-", "-", "-"],
         ["-", "-", "-"]]

def check_if_win(board, player):
  if board[0] == [player, player, player]:
    pass
  for i in board:
    if i == [player, player, player]:
      return 1
  for i in range (0,3):
    if board[0][i] == player and board[1][i] == player and board[2][i] == player:
      return 1
  if board[0][0] == player and board[1][1] == player and board[2][2] == player:
    return 1
  if board[0][2] == player and board[1][1] == player and board[2][0] == player:
    return 1
  return 0

# b = [[1,3,1],
#      [3,3,0],
#      [1,0,1]]

# print(check_if_win(b, 1))
# print(check_if_win(b, 0))

def display_board(board):
  for i in board:
    print(i[0],i[1],i[2])

def make_possibilities(board,player):
  possibility_list = []
  for i in range(len(board)):
    for j in range(len(board[i])):
      if board[i][j] == "-":
        new_board = copy.deepcopy(board)
        new_board[i][j] = player
        possibility_list.append(new_board)
  return possibility_list

# def evaluate_board_old(board, player):
#   if check_if_win(board,player) is 1:
#     return 1
#   else:
#     if player == "x":
#       if check_if_win(board,"o") is 1:
#         return 0
#     else:
#       if check_if_win(board,"x") is 1:
#         return 0

def is_draw(board):
  for i in board:
    if "-" in i:
      return False
  return True


def opposite(player):
  if player == "x":
    return "o"
  elif player == "o":
    return "x"
  else:
    raise Exception("Oops!")

def evaluate_board(board, player):
  if check_if_win(board, "x") == 1:
    return 1
  elif check_if_win(board,"o") == 1:
    return 0
  elif is_draw(board):
    return 0.5

  possibilities = make_possibilities(board, player)
  evaluated_possibilities = []
  for i in possibilities:
    evaluated_possibilities.append(evaluate_board(i,opposite(player)))
  if player == "x":
    best = max(evaluated_possibilities)
    return best
  else:
    worst = min(evaluated_possibilities)
    return worst


def find_best_move(board):
  player = "x"
  possibilities = make_possibilities(board, player)
  evaluated_possibilities = []
  for i in possibilities:
    evaluated_possibilities.append(evaluate_board(i, opposite(player)))
  choose_move = possibilities[evaluated_possibilities.index(max(evaluated_possibilities))]
  return choose_move

# def recurrance(board, player):
#   next_moves = make_possibilities(board, player)
#   output_list = []
#   for i in next_moves:
#     if player == "x":
#       output_list.append(recurrance(i,"o"))
#     else:
#       output_list.append(recurrance(i,"o"))
#   return output_list


# all_possibilities = recurrance(board,"x")
# print(all_possibilities)

# print(evaluate_board(board,"o"))



display_board(board)
while True:
  print("it is your turn, player x!")
  board = find_best_move(board)
  display_board(board)
  if check_if_win(board,"x"):
    print("player x has won!!!")
    break
  elif is_draw(board):
    print("Draw!")
    break



  print("it is your turn, player o!")
  o_row = input("Enter the row number of where you want to place your o (1-3): ")
  o_column = input("Enter the column number of where you want to place your o (1-3): ")
  if board[int(o_row)-1][int(o_column)-1] == "-":
    board[int(o_row)-1][int(o_column)-1] = "o"
  else:
    print("please enter a spot that is free! it is your opponent's turn now!")
  display_board(board)
  if check_if_win(board,"o"):
    print("player o has won!!!")
    break
  elif is_draw(board):
    print("Draw!")
    break
